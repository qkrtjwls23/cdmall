<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<title>Insert title here</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="/css/header.css">
<link rel="stylesheet" href="/css/main.css">
<link rel="stylesheet" href="/css/read.css">
<link rel="stylesheet" href="/css/nav.css">
		
<style>
	#attachment { width: 250px; }
	.td1 { width: 30px; }
	.td2 { width: 170px; }
	.td3 { width: 50px; }
	#ibimage {
	width: 600px;
	display: block; margin: 0px auto; size: cover;}
	
	#btnArea {
	margin-top: 20px;
	}
	
	.form-control1 {
	width: 1238px;
	}
</style>
<script sec:authorize="isAuthenticated()">
	const isLogin = true
</script>
<script  sec:authorize="isAnonymous()">
	const isLogin = false;
</script>
<script>
	let isWriter = undefined;
	let imageBoard = undefined;
	let currentUser = undefined;
	
	const init=(imageBoard)=>{
		
		// board의 필드들을 출력
		$("#ibno").text(imageBoard.ibno);
		$("#writeday").text(imageBoard.createTime);
		$("#writer").text(imageBoard.writer);
		$("#title").val(imageBoard.title);
		$("#report_cnt").text(imageBoard.reportCnt);
		$("#content").html(imageBoard.content);
		$("#ibimage").attr("src", "/upload/ibimage/" + imageBoard.imageFileName);
		//$("#bad_cnt").text(imageBoard.badCnt);
		
		// ajax 실행 결과값 isReported true/false	
		const param = {
				ibno : ibno,
				loginId : currentUser
			};
			$.ajax({ async: false, url: "/imageBoard_member/is_report", data: param, method: "get"})
				.done(reportCheck=>{
		 
		 			isReported = reportCheck;
		
		// 비로그인, 글쓴이, 글쓴이 아님에 따른 화면 구성
		if(isLogin==true && isWriter==true) {
			$("#title").prop("disabled", false);
			$("#report_btn").prop("disabled", true);
			//filebrowserUploadUrl : '/imageBoard/ibimage'
			
			const $btnArea = $("#btnArea");
			$("<button>").attr("id","update").attr("class","btn btn-info").text("변 경").appendTo($btnArea);
			$("<span>").html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;").appendTo($btnArea);
			$("<button>").attr("id","delete").attr("class","btn btn-info").text("삭 제").appendTo($btnArea);
			$("<span>").html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;").appendTo($btnArea);
			$("<button>").attr("id","back").attr("class","btn btn-light").css({"float":"right", "color":"black"}).text("뒤로가기").appendTo($btnArea);
			
			$("#ibcomment_textarea").prop("readonly",false).attr("placeholder", "욕설이나 모욕적인 댓글은 삭제될 수 있습니다");

			const $ibcommentBtnArea = $("#ibcommentBtnArea");
			$("<button>").attr("id","write").attr("class","btn btn-info").text("댓글 추가").appendTo($ibcommentBtnArea);
		} else if (isLogin==true && isWriter==false) {
			$("#report_btn").prop("disabled", false);
			$("#content").prop("readonly",true);
			$("#ibcomment_textarea").prop("readonly",false).attr("placeholder", "욕설이나 모욕적인 댓글은 삭제될 수 있습니다");

			const $ibcommentBtnArea = $("#ibcommentBtnArea");
			$("<button>").attr("id","write").attr("class","btn btn-info").text("댓글 추가").appendTo($ibcommentBtnArea);
		}
	});		
}
	
		
	const printIBAttachments=(ibattachments)=>{
		console.log(ibattachments);
		const $table = $("#ibattachment");
		// 자식들 삭제
		$table.empty();
		
		// $("어쩌구").each(function(idx, item)) -> jQuery 객체 전용
		// $.each(집합, function(idx, item)) -> 범용
		$.each(ibattachments, function(i, ibattachment) {
			const $tr = $("<tr>").appendTo($table);
			
			const $td1 = $("<td class='td1'>").appendTo($tr)
			if(ibattachment.isImage==true)
				$('<i class="fa fa-file-image-o"></i>').appendTo($td1);
			else
				$('<i class="fa fa-paperclip"></i>').appendTo($td1);
			
			const $td2 = $("<td class='td2'>").appendTo($tr)
			$("<a href='/attachments/" + ibattachment.ano + "'>" + ibattachment.originalFileName + "</a>").appendTo($td2);
							
			const $td3 = $("<td class='td3'>").appendTo($tr)
			if(isLogin==true && isWriter==true) {
				$("<span class='delete_ibattachment' data-ano='" + ibattachment.ano + "' data-ibno='" + imageBoard.ibno + "'>X</span>").appendTo($td3);
				$(".delete_ibattachment").css("cursor","pointer").attr("title", ibattachment.imageFileName + " 삭제");
			}
		});
	};
	
	const printIBComments=(ibcomments)=>{
		$("#ibcomments").empty();
		$.each(ibcomments, function(idx, ibcomment) {
			const $outer_div = $("<div>").appendTo($("#ibcomments"));
			
			const $upper_div = $("<div>").appendTo($outer_div);
			$("<span>").css("color","blue").text(ibcomment.writer).appendTo($upper_div);
			$("<span>").text(" [" + ibcomment.createTime+"]").appendTo($upper_div);
			
			const $lower_div = $("<div>").css("overflow", "hidden").appendTo($outer_div);
			$("<img>").attr("src",ibcomment.profile).css("width","60px").appendTo($lower_div);
			$("<span>").text(ibcomment.content).appendTo($lower_div);

			if(isLogin==true && currentUser==ibcomment.writer) {
				$("<button>").attr("class","delete_ibcomment").attr("data-ibcno", ibcomment.ibcno).attr("data-ibno", imageBoard.ibno)
					.text("삭제").css("float","right").appendTo($lower_div);
			}
			$("<hr>").appendTo($("#ibcomments"));
		});
	};
	
	$(document).ready(()=>{
		// 로그인 아이디를 자바스크립트에서 접근하고 싶다. JSTL은 <c:set>을 이용해 변수 생성이 가능한데 타임리프는 안되는 것 같다
		// 그래서 hidden div를 만들어 div에 아이디를 저장한 다음 자바스크립트로 읽었다
		const $username = $("#username").text();
		const ibno = location.search.substr(6);
		$.ajax("/imageBoard/" + ibno).done(result=> {
			// ES5의 변수는 var로 만든다 -> 스코프(=범용 범위)는 함수
			// ES5에서 변수를 var없이 만들 수 있다 -> 전역
			
			// ES6는 키워드없이 변수를 만들 수 없다. 변수의 스코프는 {} , 중괄호는 스코프를 만들지 않습니다
			imageBoard = result;
			isWriter = $username == imageBoard.writer;
			currentUser = $("#username").text();
			init(imageBoard);
			printIBAttachments(imageBoard.ibattachments);
			printIBComments(imageBoard.ibcomments);
		});
		
		// 댓글 작성
		$("#ibcommentBtnArea").on("click", "#write", ()=> {
			const param = {
				ibno: ibno, // 앞에는 이름, 뒤에는 값
				content : $("#ibcomment_textarea").val()
			};
			$.ajax({url: "/ibcomments", method:"post", data:param}).done(ibcomments=>{
				$("#ibcomment_textarea").val("");
				printIBComments(ibcomments);
			});
		});
		
		
		// 댓글 삭제
		// 자바의 경우 this가 고정되어 있다. 자바스크립트의 경우 this는 상황에 따라 바뀐다 => 화살표 함수는 this 고정.
		// this를 사용해야 하는 경우는 화살표 함수를 사용하지 말자
		$("#ibcomments").on("click", ".delete_ibcomment", function() {
			// 코멘트 삭제 버튼은 여러개라서 id를 걸 수 없다. bno, cno 값이 같이 들어가 있어야 삭제가 가능하다
			//console.log($(this));
			//console.log($(this).attr("data-ibcno"));
			// .data 안되면 .attr 쓰면 되고 대신 .attr은 수동으로 data-를 적어줘야 한다
			const param = {ibcno : $(this).attr("data-ibcno"), ibno : imageBoard.ibno};
			$.ajax({url: "/ibcomments", method:"delete", data:param}).done(ibcomments=>	printIBComments(ibcomments));
		});
		
		// 변경
		$("#btnArea").on("click", "#update", ()=>{
			const param = {
				title : $("#title").val(),
				content : $("#content").val(),
			}
			$.ajax({
				url: "/imageBoard/" + imageBoard.ibno,
				data: param,
				method:"put",
			})
			.done((result, text, response)=>{ location.reload() })
			.fail((response, text, message)=>{})
		});
		
		// 삭제
		$("#btnArea").on("click", "#delete", ()=>{
			$.ajax({
				url: "/imageBoard/" + imageBoard.ibno,
				method:"delete",
			})
			.done((result, text, response)=>{ location.href = "/" })
			.fail((response, text, message)=>{})
		});
		
		// 신고
		$("#report_btn").on("click", ()=>{
			const param = {ibno: imageBoard.ibno}
			$.ajax({ url: "/imageBoard_member/is_report", data: param, method: "patch"})
				.done(reportCnt=>$("#report_cnt").text(reportCnt));
		});
		
		// 뒤로가기
		$("#btnArea").on("click", "#back", ()=>{
			$.ajax({
				url: "/imageBoard/" + imageBoard.ibno,
				method:"get",
			})
			.done((result, text, response)=>{ location.href = "/imageBoard/list" })
			.fail((response, text, message)=>{})
		});
		
	});
</script>

</head>
<script>
	// 화면 구성, 댓글 출력, 댓글 작성, 댓글 삭제, 추천, 비추, 변경, 삭제
</script>
<body>
<div id="page">
	<header id="header" th:replace="/fragments/headerBoard">
	</header>
	<div id="username" sec:authentication="name" style="display:none;"></div>
	<nav id="nav" th:replace="/fragments/navBoard">
	</nav>
	<div id="main">

		<section id="section">
			<div id="title_div">
				<!-- 제목, 작성자 출력 영역 -->
				<div id="upper">
					<input type="text" id="title" disabled="disabled" >
					<span id="writer"></span>
				</div>
				<!-- 글번호, 작성일, 아이피, 추천수, 조회수, 신고수 출력 영역 -->
				<div id="lower">
					<ul id="lower_left">
						<li>글번호<span id="ibno"></span></li>
						<li><span id="writeday"></span></li>
					</ul>
					<ul id="lower_right">
					<li><button type="button" class="btn btn-warning" id="report_btn" >신고<span class="badge" id="report_cnt"></span></button></li>
					</ul>
				</div>
			</div>
			<div>
				<img id="ibimage">
			</div>
			<div>
				<table id="ibattachment">
				
				</table>
			</div>
			<!--  본문, 갱신 버튼, 삭제 버튼 출력 영역 -->
			<div id="content_div">
				<div class="form-group">
					<div class="form-control" id="content" ></div>
				</div>
			</div>
			<div id="btnArea">
			</div>
			<hr>
			<div class="form-group1" style="width: 1270px;">
      			<label for="ibcomment_textarea" >댓글을 입력하세요</label>
      			<textarea class="form-control1" rows="5" id="ibcomment_textarea" readonly="readonly"
      				placeholder="댓글을 작성하려면 로그인 해주세요"  ></textarea>
    		</div>
			<div id="ibcommentBtnArea">
    			<!-- 로그인하면 댓글 달기 버튼을 추가 -->
			</div>
			<hr>
			<div id="ibcomments">
				<div>
					<div><span style="color:blue;"></span> </div>
					<div style="overflow:hidden;">
						<img style="width:60px;">
						<span></span>
					</div>
				</div>
				<hr>
			</div>
		</section>
	</div>
	
	<footer id="footer" th:replace="/fragments/footer">
	</footer>
</div>
</body>
</html>