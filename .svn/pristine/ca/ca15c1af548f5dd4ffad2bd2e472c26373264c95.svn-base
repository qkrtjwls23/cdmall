<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<title>Insert title here</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="_csrf" th:content="${_csrf.token}"/>
<meta name="_csrf_header" th:content="${_csrf.headerName}"/>
<link rel="stylesheet" href="/css/main.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="/script/main.js"></script>
<script>
	const token = $("meta[name='_csrf']").attr("content");
	const header = $("meta[name='_csrf_header']").attr("content");
	
	let _this = undefined;
	
	const main = {
		init: function() {
			$("#add").on("click", this.add);
			_this = this;
		},
		add: function() {
			if($("#nickname").val()=="") {
				alert("배송지명을 입력하세요");
				$("#nickname").focus();
			}
			
			// 여기서 필수 입력 검증이 필요하다. 여겨선 생략
			const param = {
				nickname: $("#nickname").val(),
				zipcode: $("#zipcode").val(),
				address1: $("#roadAddress").val(),
				address2: $("#detailAddress").val(),
				isDefault: 0
			};
			
			$.ajax({url:"/addresses/new", method:"post", data:param, beforeSend: function(xhr) { xhr.setRequestHeader(header, token) }}).done(addressNo=> {
				const $value = $("#roadAddress").val() + " " + $("#detailAddress").val();
				
				// 자식창에서 부모창(opener)에 접근하는 자바 스크립트
				// 부모창의 #forwardingAddress의 값을 변경하는 자바스크립트
				// 		opener.document.getElementById("forwardingAddress").innerHTML = $value;
				// 같은 일을 하는 jQuery
				//		$("#forwardingAddress", opener.document).text($value);
				$("#address", opener.document).prop("disabled", false);
				$("#address_area", opener.document).attr("data-addressNo", addressNo);
				close();
			});
		}
	};
	
	window.onload=function() {
		main.init();
	};
</script>
<body>
	<h1>배송주소 추가</h1>
	배송지명 : <input type="text" id="nickname" placeholder="배송지명" autofocus>
	<br>
	<input type="text" id="zipcode" placeholder="우편번호">
	<input type="button" onclick="execDaumPostcode()" value="우편번호 찾기"><br>
	<input type="text" id="roadAddress" placeholder="도로명주소">
	<input type="text" id="jibunAddress" placeholder="지번주소">
	<span id="guide" style="color:#999;display:none"></span>
	<input type="text" id="detailAddress" placeholder="상세주소">
	<br>
	<button id="add">배송지 추가</button>
	<script src="//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
	<script>
		//본 예제에서는 도로명 주소 표기 방식에 대한 법령에 따라, 내려오는 데이터를 조합하여 올바른 주소를 구성하는 방법을 설명합니다.
		function execDaumPostcode() {
			new daum.Postcode({
				oncomplete: function (data) {
					let roadAddr = data.roadAddress; // 도로명 주소 변수
					let extraRoadAddr = ''; // 참고 항목 변수

					// 법정동명이 있을 경우 추가한다. (법정리는 제외)
					// 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
					if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {
						extraRoadAddr += data.bname;
					}
					// 건물명이 있고, 공동주택일 경우 추가한다.
					if (data.buildingName !== '' && data.apartment === 'Y') {
						extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);
					}
					// 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
					if (extraRoadAddr !== '') {
						extraRoadAddr = ' (' + extraRoadAddr + ')';
					}

					// 우편번호와 주소 정보를 해당 필드에 넣는다.
					document.getElementById('zipcode').value = data.zonecode;
					document.getElementById("roadAddress").value = roadAddr;
					document.getElementById("jibunAddress").value = data.jibunAddress;
				}
			}).open();
		}
	</script>
</body>

</html>